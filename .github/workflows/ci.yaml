name: ci

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - master
  schedule:
    # See https://crontab.guru/weekly
    - cron: 0 0 * * 0

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
      - name: Set PY
        run:
          echo "PY=$(python -c 'import hashlib,
          sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')"
          >> $GITHUB_ENV
      - uses: actions/cache@v1
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - uses: pre-commit/action@v1.0.1

  build-test-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        pg_version:
          - "16"
          - "15"
          - "14"
          - "13"
          - "12"
          - "11"
          - "10"
          - "9.6"
        platform:
          - "amd64"
          - "arm64"

    env:
      PG_LATEST: "16"
    steps:
      - uses: actions/checkout@v4

      - name: Set up python
        uses: actions/setup-python@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: matrix.platform != 'amd64'
        with:
          platforms: ${{ matrix.platform }}

      - name: Get build date
        id: date
        run: echo "date=$(date --rfc-3339 ns)" >> $GITHUB_OUTPUT

      - name: Get latest tag
        id: tag-latest
        if: matrix.pg_version == env.PG_LATEST
        run: echo "tag=${{ matrix.platform == 'amd64' && ' latest' || format(' latest-{0}', matrix.platform) }}" >> $GITHUB_OUTPUT

      - name: Build image
        id: build
        uses: redhat-actions/buildah-build@v2
        with:
          image: postgres-autoconf
          tags: ${{ matrix.platform == 'amd64' && format('{0}-alpine', matrix.pg_version) || format('{0}-alpine-{1}', matrix.pg_version, matrix.platform) }}${{ steps.tag-latest.outputs.tag || '' }}
          context: .
          platforms: linux/${{ matrix.platform }}
          containerfiles: |
            Dockerfile
          build-args: |
            BUILD_DATE=${{ steps.date.outputs.date }}
            VCS_REF=${{ github.sha }}
            BASE_TAG=${{ matrix.pg_version }}-alpine

      - name: Install requirements for testing
        run: pip install -r tests/ci-requirements.txt

      - name: Run unit tests
        run: python -m unittest tests.test -v

      - name: Push image to Docker Hub
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build.outputs.image }}
          tags: ${{ steps.build.outputs.tags }}
          registry: docker.io/tecnativa
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image to GHCR
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build.outputs.image }}
          tags: ${{ steps.build.outputs.tags }}
          registry: ghcr.io/Tecnativa
          username: ${{ github.BOT_LOGIN }}
          password: ${{ secrets.BOT_TOKEN }}
